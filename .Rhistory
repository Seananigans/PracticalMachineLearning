training <- adData[inTrain,]
testing <- adData[-inTrain,]
preProcess(adData[inTrain,grep("^IL",names(adData))],
method='pca',
thresh=0.9)
####Project 1 Directory Setup####
CourseDir<- getwd()
if (CourseDir!="~/DataScience/PracticalMachineLearning"){
print("Changing Directory")
setwd("~/DataScience/PracticalMachineLearning")
CourseDir<- getwd()
}
####Create Directory for data and figures####
if (!file.exists("Project1")) {
print("Creating Project1 Directory")
dir.create("Project1")
dir.create("Project1/data")
dir.create("Project1/figures")
}
ProjDir <- getwd()
if (ProjDir!="~/DataScience/PracticalMachineLearning/Project1"){
print("Changing Directory")
setwd(paste(CourseDir,"/Project1",sep=""))
}
ProjDir <- getwd()
####Download file####
if(!"pml-training.csv" %in% dir("data")){
print("Downloading Activity Data")
setwd(paste(ProjDir,"/data",sep=""))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "pml-training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "pml-testing.csv")
setwd(ProjDir)
}
####Importing Data####
if(!"pml.training" %in% ls()){
print("Importing Activity Data into Environment")
setwd(paste(ProjDir,"/data",sep=""))
pml.training <- read.csv("pml-training.csv")
setwd(ProjDir)
}
####Cleaning Data####
library(plyr)
totalNum <- 0
for(i in 1:ncol(pml.training)){
print(is.numeric(pml.training[,i]))
totalNum = totalNum+is.numeric(pml.training[,i])
}
totalNum/ncol(pml.training)
nsv <- nearZeroVar(pml.training,saveMetrics=TRUE)
nsv
class(nsv)
nsv$nzv
pml.train <- pml.training[,nsv$nzv]
dim(pml.train)
nearZeroVar(pml.train,saveMetrics=TRUE)
nsv <- nearZeroVar(pml.training,saveMetrics=TRUE)
pml.train <- pml.training[,!nsv$nzv]
dim(pml.train)
nearZeroVar(pml.train,saveMetrics=TRUE)
dim(pml.train)
View(pml.train)
View(pml.training)
preProc <- preProcess(pml.train[,-1:6], method="pca",pcaComp=3)
preProc <- preProcess(pml.train[,-(1:6)], method="pca",pcaComp=3)
preProc <- preProcess(pml.train[,-(1:6)], method="pca",pcaComp=2)
preProc <- preProcess(pml.train[,-c(1:6)], method="pca",pcaComp=2)
totalNum <- 0
for(i in 1:ncol(pml.train)){
print(is.numeric(pml.train[,i]))
totalNum = totalNum+is.numeric(pml.training[,i])
}
preProc <- preProcess(pml.train[,-(1:6,ncol(pml.train))], method="pca",pcaComp=2)
preProc <- preProcess(pml.train[,-c(1:6,ncol(pml.train))], method="pca",pcaComp=2)
classy
classy <- predict(preProc,pml.test)
classy <- predict(preProc,pml.testing)
if(!"pml.testing" %in% ls()){
print("Importing Testing Data into Environment")
setwd(paste(ProjDir,"/data",sep=""))
pml.training <- read.csv("pml-testing.csv")
setwd(ProjDir)
}
if(!"pml.training" %in% ls()){
print("Importing Training Data into Environment")
setwd(paste(ProjDir,"/data",sep=""))
pml.training <- read.csv("pml-training.csv")
setwd(ProjDir)
}
setwd(paste(ProjDir,"/data",sep=""))
pml.training <- read.csv("pml-training.csv")
setwd(ProjDir)
pml.testing <- read.csv("pml-testing.csv")
setwd(paste(ProjDir,"/data",sep=""))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "pml-testing.csv")
setwd(ProjDir)
if(!"pml.testing" %in% ls()){
print("Importing Testing Data into Environment")
setwd(paste(ProjDir,"/data",sep=""))
pml.testing <- read.csv("pml-testing.csv")
setwd(ProjDir)
}
classy <- predict(preProc,pml.testing)
classy <- predict(preProc,pml.train)
classy
preProc
classy <- predict(preProc,pml.train[,-c(1:6,ncol(pml.train))])
confusionMatrix(pml.train$classe,classy)
pml.test <- pml.testing[,!nsv$nzv]
testPC <- predict(preProc,pml.test[,-c(1:6,ncol(pml.train))])
modelFit <- train(pml.training$classe ~ .,method="glm",data=classy)
confusionMatrix(pml.test$classe,predict(modelFit,testPC))
modelFit <- train(pml.train$classe ~ .,method="glm",data=classy)
modelFit <- train(pml.train$classe ~ .,method="glm",preProcess="pca",data=classy)
warnings()
setwd("~/DataScience/PracticalMachineLearning")
setwd("~/")
#### Set Working Directory ####
setwd("~/DataScience/PracticalMachineLearning")
####Load Necessary Libraries####
LoadLibraries <- function(){
library(ISLR)
library(ggplot2)
library(caret)
library(AppliedPredictiveModeling)
library(kernlab)
}
LoadLibraries()
data(spam)
set.seed(333)
smallSpam <- spam[sample(nrow(spam),size=10),]
spamLabel <- (smallSpam$type=="spam")+1
plot(smallSpam$capitalAve,col=spamLabel)
data(concrete)
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength,p=3/4)[[1]]
training <- mixtures[inTrain,]
testing <- mixtures[-inTrain,]
summary(concrete$Superplasticizer)
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
head(adData)
View(adData)
inTrain <- createDataPartition(adData$diagnosis,p=3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
preProcess(adData[inTrain,grep("^IL",names(adData))],
method='pca',
thresh=0.9)
inTrain <- createDataPartition(AlheimerDisease,p= 0.50, list= FALSE)
inTrain <- createDataPartition(AlzheimerDisease,p= 0.50, list= FALSE)
data(AlzheimerDisease)
inTrain <- createDataPartition(AlzheimerDisease,p= 0.50, list= FALSE)
adData <- data.frame(diagnosis)
View(adData)
data(AlzheimerDisease)
data(AlzheimerDisease)
View(predictors)
adData <- data.frame(diagnosis,predictors)
View(adData)
inTrain <- createDataPartition(adData,p= 0.50, list= FALSE)
data(AlzheimerDisease)
# Create training and test sets each containing 50% of the data #
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData,p= 0.50, list= FALSE)
inTrain <- createDataPartition(diagnosis,p= 0.50, list= FALSE)
training <- adData[,inTrain]
testing <- adData[,-inTrain]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
hist(SuperPlasticizer)
data(concrete)
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength,p=3/4)[[1]]
training <- mixtures[inTrain,]
testing <- mixtures[-inTrain,]
# Make a histogram to confirm skewedness of SuperPlasticizer variable #
hist(concrete$SuperPlasticizer)
View(concrete)
sapply(concrete,class)
hist(concrete$Superplasticizer)
log(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer))
summary(log(concrete$Superplasticizer))
summary(concrete$Superplasticizer)
summary(log(concrete$Superplasticizer))
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
head(adData)
View(adData)
inTrain <- createDataPartition(adData$diagnosis,p=3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
IL
preProcess(IL,method='pca',thresh=0.9)
IL <- adData[inTrain,grep("^IL",names(adData))]
preProcess(IL,method='pca',thresh=0.9)
preProcess(IL,method='pca')
preProcess(IL,method='pca',thresh=0.90)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?train
princComp
princComp <- preProcess(IL,method='pca',thresh=0.80)
View(IL)
View(adData)
IL <- adData[inTrain,grep("^IL",names(adData))+1]
View(IL)
IL <- adData[inTrain,grep("^IL",names(adData))]
IL <- data.frame(diagnosis,IL)
IL <- adData[inTrain,c(diagnosis,grep("^IL",names(adData)))]
train(diagnosis~.,data=IL,method="glm")
glm(diagnosis~,data=IL,type="response")
glm(diagnosis~.,data=IL,type="response")
?glm
glm(diagnosis~.,data=IL,family=binomial)
View(IL)
IL <- adData[inTrain,c(diagnosis,grep("^IL",names(adData)))]
IL <- adData[inTrain,grep("^IL",names(adData))]
View(IL)
train(adData$diagnosis~.,data=IL,method="glm")
data.frame(diagnosis[inTrain,],IL)
data.frame(diagnosis[inTrain],IL)
IL <- data.frame(diagnosis[inTrain],IL)
View(IL)
glm(diagnosis~.,data=IL,family=binomial)
train(diagnosis~.,data=IL,method="glm")
names(IL)
names(IL)[1] <- "diagnosis"
names(IL)
glm(diagnosis.in.train~.,data=IL,family=binomial)
train(diagnosis~.,data=IL,method="glm")
train(diagnosis~.,data=IL,method="glm",preProc="pca")
princCompModel <- train(diagnosis~.,data=IL,method="glm",preProc="pca")
modelFit <- glm(diagnosis~.,data=IL,family=binomial)
?predict
predict(modelFit,testing)
probs
levels(diagnosis)
prcomp(IL)
prcomp(IL[,2:ncol(IL)])
preProcess(log10(IL[,-1]+1),method="pca",thresh=0.8)
preProcess(log10(IL[,-(1)]+1),method="pca",thresh=0.8)
preProcess(log10(IL),method="pca",thresh=0.8)
preProcess(IL,method="pca",thresh=0.8)
preProcess(IL[,-1],method="pca",thresh=0.8)
predict(preProcess(IL[,-1],method="pca",thresh=0.8),testing)
IL.train <- adData[inTrain,grep("^IL",names(adData))]
IL.train <- data.frame(diagnosis[inTrain],IL.train)
names(IL.train)[1] <- "diagnosis"
#
modelFit <- glm(diagnosis~.,data=IL.train,family=binomial)
train(diagnosis~.,data=IL.train,method="glm")
princCompModel <- train(diagnosis~.,data=IL.train,method="glm",preProc="pca")
predict(preProcess(IL.train[,-1],method="pca",thresh=0.8),testing)
data(spam)
View(Spam)
View(spam)
preProc <- preProcess(log10(IL.train[,-1]+1),method='pca')
preProc <- preProcess(IL.train[,-1],method='pca')
trainPC <- predict(preProc,IL.train[,-1])
modelFitPC <- train(IL.train$diagnosis~.,method='glm',data=trainPC)
IL.test <- adData[-inTrain,grep("^IL",names(adData))]
IL.test <- data.frame(diagnosis[-inTrain],IL.test)
names(IL.test)[1] <- "diagnosis"
testPC <- predict(preProc,IL.test[,-1])
confusionMatrix(IL.test$diagnosis,predict(modelFitPC,testPC))
modelFit <- train(diagnosis~.,data=IL.train,method="glm")
preProc <- preProcess(IL.train[,-1],method='pca',thresh=0.80)
trainPC <- predict(preProc,IL.train[,-1])
modelFitPC <- train(IL.train$diagnosis~.,method='glm',data=trainPC)
testPC <- predict(preProc,IL.test[,-1])
confusionMatrix(IL.test$diagnosis,predict(modelFitPC,testPC))
confusionMatrix(IL.test$diagnosis,predict(modelFit,IL.test))
confusionMatrix(testing$diagnosis,predict(modelFitPC,testPC))
testPC <- predict(preProc,testing[,-1])
library(rCharts)
dtable(airquality,sPaginationType="full_numbers")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
?abline
myPlot <- function(i,s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(i, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1),i = 0)
myPlot <- function(i,s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(a=i,b= s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1),i = 0)
myPlot <- function(i=0,s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(a=i,b= s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
myPlot <- function(s,i) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(i, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1), i = slider(-5, 5, step = 0.1))
myplot(0,1)
myPlot(0,1)
int
myPlot <- function(slope,int) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(int, slope)
}
manipulate(myPlot(s), slope = slider(0, 2, step = 0.1), int = slider(-5, 5, step = 0.1))
myPlot <- function(slope=1,int=0) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(int, slope)
}
manipulate(myPlot(s), slope = slider(0, 2, step = 0.1), int = slider(-5, 5, step = 0.1))
myPlot <- function(slope=1,int=0) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(a=int, b=slope)
}
manipulate(myPlot(s), slope = slider(0, 2, step = 0.1), int = slider(-5, 5, step = 0.1))
manipulate(myPlot(slope,int), slope = slider(0, 2, step = 0.1), int = slider(-5, 5, step = 0.1))
mean(cars$dist)
myPlot <- function(slope=1,int=0) {
plot(cars$dist, cars$speed)
abline(a=int, b=slope)
}
manipulate(myPlot(slope,int), slope = slider(0, 2, step = 0.1), int = slider(35, 50, step = 0.5))
mean(cars$speed)
manipulate(myPlot(slope,int), slope = slider(0, 2, step = 0.1), int = slider(10, 20, step = 0.5))
manipulate(myPlot(slope,int), slope = slider(0, 2, step = 0.1), int = slider(0, 20, step = 0.5))
myPlot <- function(slope=1,int=0) {
plot(cars$dist, cars$speed)
abline(a=int, b=slope)
MSE <- (cars$speed-(int + slope*cars$dist))^2/nrow(cars)
}
manipulate(myPlot(slope,int), slope = slider(0, 2, step = 0.1), int = slider(0, 20, step = 0.5))
myPlot <- function(slope=1,int=0) {
plot(cars$dist, cars$speed)
abline(a=int, b=slope)
MSE <- (cars$speed-(int + slope*cars$dist))^2/nrow(cars)
legend(x=10,y=150,legend = paste("MSE = ",MSE))
}
manipulate(myPlot(slope,int), slope = slider(0, 2, step = 0.1), int = slider(0, 20, step = 0.5))
myPlot <- function(slope=1,int=0) {
plot(cars$dist, cars$speed)
abline(a=int, b=slope)
MSE <- mean((cars$speed-(int + slope*cars$dist))^2)
legend(x=10,y=150,legend = paste("MSE = ",MSE))
}
manipulate(myPlot(slope,int), slope = slider(0, 2, step = 0.1), int = slider(0, 20, step = 0.5))
myPlot <- function(slope=1,int=0) {
plot(cars$dist, cars$speed)
abline(a=int, b=slope)
MSE <- mean((cars$speed-(int + slope*cars$dist))^2)
legend(x=100,y=150,legend = paste("MSE = ",MSE))
}
manipulate(myPlot(slope,int), slope = slider(0, 2, step = 0.1), int = slider(0, 20, step = 0.5))
myPlot <- function(slope=1,int=0) {
plot(cars$dist, cars$speed)
abline(a=int, b=slope)
MSE <- mean((cars$speed-(int + slope*cars$dist))^2)
legend(x=100,y=15,legend = paste("MSE = ",MSE))
}
myPlot <- function(slope=1,int=0) {
plot(cars$dist, cars$speed)
abline(a=int, b=slope)
MSE <- mean((cars$speed-(int + slope*cars$dist))^2)
legend("center",legend = paste("MSE = ",MSE))
}
manipulate(myPlot(slope,int), slope = slider(0, 2, step = 0.1), int = slider(0, 20, step = 0.5))
myPlot <- function(slope=1,int=0) {
plot(cars$dist, cars$speed)
abline(a=int, b=slope)
MSE <- mean((cars$speed-(int + slope*cars$dist))^2)
legend("center",legend = paste("MSE = ",MSE))
points(y=int + slope*(0:120),x=0:120)
}
manipulate(myPlot(slope,int), slope = slider(0, 2, step = 0.1), int = slider(0, 20, step = 0.5))
myPlot <- function(int=0,slope=1) {
plot(cars$dist, cars$speed)
#abline(a=int, b=slope)
MSE <- mean((cars$speed-(int + slope*cars$dist))^2)
legend("center",legend = paste("MSE = ",MSE))
points(y=int + slope*(0:120),x=0:120)
}
manipulate(myPlot(slope,int), slope = slider(0, 2, step = 0.1), int = slider(0, 20, step = 0.5))
manipulate(myPlot(int,slope), slope = slider(0, 2, step = 0.1), int = slider(0, 20, step = 0.5))
myPlot <- function(int=0,slope=1) {
plot(cars$dist, cars$speed)
#abline(a=int, b=slope)
MSE <- mean((cars$speed-(int + slope*cars$dist))^2)
points(y=int + slope*(0:120),x=0:120)
legend("center",legend = paste("MSE = ",MSE))
}
manipulate(myPlot(int,slope), slope = slider(0, 2, step = 0.1), int = slider(0, 20, step = 0.5))
myPlot <- function(int=0,slope=1,d2=0) {
plot(cars$dist, cars$speed)
#abline(a=int, b=slope)
MSE <- mean((cars$speed-(int + slope*cars$dist))^2)
points(y=int + slope*(0:120) + d2*(0:120),x=0:120)
legend("center",legend = paste("MSE = ",MSE))
}
manipulate(myPlot(int,slope,d2),
int = slider(0, 20, step = 0.5),
slope = slider(0, 2, step = 0.1),
d2 = slider(-2, 2, step = 0.1))
myPlot <- function(int=0,slope=1,d2=0) {
plot(cars$dist, cars$speed)
#abline(a=int, b=slope)
MSE <- mean((cars$speed-(int + slope*cars$dist))^2)
points(y=int + slope*(0:120) + d2*(0:120)^2,x=0:120)
legend("center",legend = paste("MSE = ",MSE))
}
manipulate(myPlot(int,slope,d2),
int = slider(0, 20, step = 0.5),
slope = slider(0, 2, step = 0.1),
d2 = slider(-1, 1, step = 0.05))
manipulate(myPlot(int,slope,d2),
int = slider(0, 20, step = 0.5),
slope = slider(0, 2, step = 0.1),
d2 = slider(-0.5, 0, step = 0.005))
manipulate(myPlot(int,slope,d2),
int = slider(0, 20, step = 0.5),
slope = slider(0, 2, step = 0.1),
d2 = slider(-0.05, 0, step = 0.005))
manipulate(myPlot(int,slope,d2),
int = slider(0, 20, step = 0.5),
slope = slider(0, 2, step = 0.1),
d2 = slider(-0.02, 0, step = 0.001))
myPlot <- function(int=0,slope=1,d2=0) {
plot(cars$dist, cars$speed)
#abline(a=int, b=slope)
MSE <- mean((cars$speed-(int + slope*cars$dist + d2*cars$dist^2))^2)
points(y=int + slope*(0:120) + d2*(0:120)^2,x=0:120)
legend("center",legend = paste("MSE = ",MSE))
}
manipulate(myPlot(int,slope,d2),
int = slider(0, 20, step = 0.5),
slope = slider(0, 2, step = 0.1),
d2 = slider(-0.02, 0, step = 0.001))
myPlot <- function(int=0,slope=1,d2=0) {
plot(cars$dist, cars$speed)
#abline(a=int, b=slope)
MSE <- mean((cars$speed-(int + slope*cars$dist + d2*cars$dist^2))^2)
points(y=int + slope*(0:120) + d2*(0:120)^2,x=0:120,pch=16)
legend("center",legend = paste("MSE = ",MSE))
}
manipulate(myPlot(int,slope,d2),
int = slider(0, 20, step = 0.5),
slope = slider(0, 2, step = 0.1),
d2 = slider(-0.02, 0, step = 0.001))
manipulate(myPlot(int,slope,d2),
int = slider(0, 20, step = 0.5),
slope = slider(0, 2, step = 0.1),
d2 = slider(-0.002, 0, step = 0.0005))
manipulate(myPlot(int,slope,d2),
int = slider(0, 20, step = 0.5),
slope = slider(0, 1, step = 0.05),
d2 = slider(-0.002, 0, step = 0.0005))
lm(speed~poly(dist,2),data=cars)
lm.fit <- lm(speed~poly(dist,2),data=cars)
summary(lm.fit)
manipulate(myPlot(int,slope,d2),
int = slider(15, 16, step = 0.5),
slope = slider(29, 30, step = 0.05),
d2 = slider(-9, -8, step = 0.0005))
?plot
myPlot <- function(int=0,slope=1,d2=0) {
plot(cars$dist, cars$speed)
#abline(a=int, b=slope)
MSE <- mean((cars$speed-(int + slope*cars$dist + d2*cars$dist^2))^2)
points(y=int + slope*(0:120) + d2*(0:120)^2,x=0:120,pch=16,cex=0.5)
legend("center",legend = paste("MSE = ",MSE))
}
manipulate(myPlot(int,slope,d2),
int = slider(0, 20, step = 0.5),
slope = slider(0, 1, step = 0.05),
d2 = slider(-0.002, 0, step = 0.0005))
independent
myPlot <- function(int=0,slope=1,d2=0) {
plot(cars$dist, cars$speed)
#abline(a=int, b=slope)
MSE <- mean((cars$speed-(int + slope*cars$dist + d2*cars$dist^2))^2)
independent <- seq(0,120,0.5)
points(y=int + slope*independent + d2*independent^2,x=independent,pch=16,cex=0.5)
legend("center",legend = paste("MSE = ",MSE))
}
manipulate(myPlot(int,slope,d2),
int = slider(0, 20, step = 0.5),
slope = slider(0, 1, step = 0.05),
d2 = slider(-0.002, 0, step = 0.0005))
manipulate(myPlot(int,slope,d2),
int = slider(0, 20, step = 0.5),
slope = slider(0, 1, step = 0.05),
d2 = slider(-0.002, 0, step = 0.0005))
